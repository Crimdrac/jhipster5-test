<?xml version="1.0"?>
<!DOCTYPE issues [
<!ELEMENT issues (issue*)>
<!ATTLIST issues burpVersion CDATA "">
<!ATTLIST issues exportTime CDATA "">
<!ELEMENT issue (serialNumber, type, name, host, path, location, severity, confidence, issueBackground?, remediationBackground?, references?, vulnerabilityClassifications?, issueDetail?, issueDetailItems?, remediationDetail?, requestresponse*, collaboratorEvent*, infiltratorEvent*)>
<!ELEMENT serialNumber (#PCDATA)>
<!ELEMENT type (#PCDATA)>
<!ELEMENT name (#PCDATA)>
<!ELEMENT host (#PCDATA)>
<!ATTLIST host ip CDATA "">
<!ELEMENT path (#PCDATA)>
<!ELEMENT location (#PCDATA)>
<!ELEMENT severity (#PCDATA)>
<!ELEMENT confidence (#PCDATA)>
<!ELEMENT issueBackground (#PCDATA)>
<!ELEMENT remediationBackground (#PCDATA)>
<!ELEMENT references (#PCDATA)>
<!ELEMENT vulnerabilityClassifications (#PCDATA)>
<!ELEMENT issueDetail (#PCDATA)>
<!ELEMENT issueDetailItems (issueDetailItem*)>
<!ELEMENT issueDetailItem (#PCDATA)>
<!ELEMENT remediationDetail (#PCDATA)>
<!ELEMENT requestresponse (request?, response?, responseRedirected?)>
<!ELEMENT request (#PCDATA)>
<!ATTLIST request method CDATA "">
<!ATTLIST request base64 (true|false) "false">
<!ELEMENT response (#PCDATA)>
<!ATTLIST response base64 (true|false) "false">
<!ELEMENT responseRedirected (#PCDATA)>
<!ELEMENT sender (#PCDATA)>
<!ELEMENT message (#PCDATA)>
<!ELEMENT conversation (#PCDATA)>
<!ELEMENT recipient (#PCDATA)>
<!ELEMENT recipients (recipient*)>
<!ELEMENT smtp (sender, recipients, message, conversation)>
<!ELEMENT collaboratorEvent (interactionType, originIp, time, lookupType?, lookupHost?, requestresponse?, smtp?)>
<!ELEMENT interactionType (#PCDATA)>
<!ELEMENT originIp (#PCDATA)>
<!ELEMENT time (#PCDATA)>
<!ELEMENT lookupType (#PCDATA)>
<!ELEMENT lookupHost (#PCDATA)>
<!ELEMENT infiltratorEvent (parameterName, platform, signature, stackTrace?, parameterValue?, collaboratorEvent)>
<!ELEMENT parameterName (#PCDATA)>
<!ELEMENT platform (#PCDATA)>
<!ELEMENT signature (#PCDATA)>
<!ELEMENT stackTrace (#PCDATA)>
<!ELEMENT parameterValue (#PCDATA)>
]>
<issues burpVersion="1.7.37" exportTime="Thu Sep 27 20:15:13 CEST 2018">
  <issue>
    <serialNumber>1454482081754818560</serialNumber>
    <type>16777728</type>
    <name><![CDATA[Unencrypted communications]]></name>
    <host ip="193.247.167.250">http://detectportal.firefox.com</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Low</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.</p>
<p>
To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.
</p>
<p>Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure">Marking HTTP as non-secure</a></li>
<li><a href="https://wiki.mozilla.org/Security/Server_Side_TLS">Configuring Server-Side SSL/TLS</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security">HTTP Strict Transport Security</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a></li>
</ul>]]></vulnerabilityClassifications>
  </issue>
  <issue>
    <serialNumber>8245253639952646144</serialNumber>
    <type>16777472</type>
    <name><![CDATA[SSL certificate]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>SSL (or TLS) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an SSL certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, SSL connections to the server will not provide the full protection for which SSL is designed.</p>
<p>It should be noted that various attacks exist against SSL in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise SSL connections without user detection even when a valid SSL certificate is used. </p>]]></issueBackground>
    <references><![CDATA[<ul><li><a href="https://wiki.mozilla.org/Security/Server_Side_TLS">SSL/TLS Configuration Guide</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The server presented a valid, trusted SSL certificate. This issue is purely informational.<br><br>The server presented the following certificates:<br><br><h4>Server certificate</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>*.herokuapp.com, herokuapp.com</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert SHA2 High Assurance Server CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Wed Apr 19 02:00:00 CEST 2017</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Mon Jun 22 14:00:00 CEST 2020</td></tr></table><h4>Certificate chain #1</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>DigiCert SHA2 High Assurance Server CA</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Tue Oct 22 14:00:00 CEST 2013</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Sun Oct 22 14:00:00 CEST 2028</td></tr></table><h4>Certificate chain #2</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert High Assurance EV Root CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Fri Nov 10 01:00:00 CET 2006</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Mon Nov 10 01:00:00 CET 2031</td></tr></table>]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>75328912622546944</serialNumber>
    <type>5245344</type>
    <name><![CDATA[Frameable response (potential Clickjacking)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>
<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using "framebusting" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>
<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options">X-Frame-Options</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/693.html">CWE-693: Protection Mechanism Failure</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC8gSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA2OjM5IEdNVA0KTGFzdC1Nb2RpZmllZDogU3VuLCAyMyBTZXAgMjAxOCAyMDo1NzowNiBHTVQNClgtQ29udGVudC1UeXBlLU9wdGlvbnM6IG5vc25pZmYNClN0cmljdC1UcmFuc3BvcnQtU2VjdXJpdHk6IG1heC1hZ2U9MzE1MzYwMDAgOyBpbmNsdWRlU3ViRG9tYWlucw0KQ29udGVudC1MZW5ndGg6IDE1MzkNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNCkNvbnRlbnQtTGFuZ3VhZ2U6IGVuLQ0KVmlhOiAxLjEgdmVndXINCg0KPCFET0NUWVBFIGh0bWw+IDxodG1sIGNsYXNzPSJuby1qcyIgbGFuZz0iZW4iIGRpcj0ibHRyIj4gPGhlYWQ+IDxiYXNlIGhyZWY9Ii4vIi8+IDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4gPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4gPHRpdGxlPmJsb2c8L3RpdGxlPiA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iIj4gPG1ldGEgbmFtZT0iZ29vZ2xlIiB2YWx1ZT0ibm90cmFuc2xhdGUiPiA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLGluaXRpYWwtc2NhbGU9MSxzaHJpbmstdG8tZml0PW5vIj4gPG1ldGEgbmFtZT0idGhlbWUtY29sb3IiIGNvbnRlbnQ9IiMwMDAwMDAiPiA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9ImZhdmljb24uaWNvIi8+IDxsaW5rIHJlbD0ibWFuaWZlc3QiIGhyZWY9Im1hbmlmZXN0LndlYmFwcCIvPiA8bGluayBocmVmPSJjb250ZW50L3ZlbmRvcnMtc2Fzcy5kOWI0YjU5ODRlN2FiZjhkNTEzMC5jc3MiIHJlbD0ic3R5bGVzaGVldCI+PGxpbmsgaHJlZj0iY29udGVudC92ZW5kb3JzLmQ5YjRiNTk4NGU3YWJmOGQ1MTMwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ij48bGluayBocmVmPSJjb250ZW50L2dsb2JhbC1zYXNzLmQ5YjRiNTk4NGU3YWJmOGQ1MTMwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ij48bGluayBocmVmPSJjb250ZW50L21haW4tc2Fzcy5kOWI0YjU5ODRlN2FiZjhkNTEzMC5jc3MiIHJlbD0ic3R5bGVzaGVldCI+PGxpbmsgaHJlZj0iY29udGVudC9tYWluLmQ5YjRiNTk4NGU3YWJmOGQ1MTMwLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ij48L2hlYWQ+IDxib2R5PiA8IS0tW2lmIGx0IElFIDldPgogICAgICAgIDxwIGNsYXNzPSJicm93c2VydXBncmFkZSI+WW91IGFyZSB1c2luZyBhbiA8c3Ryb25nPm91dGRhdGVkPC9zdHJvbmc+IGJyb3dzZXIuIFBsZWFzZSA8YSBocmVmPSJodHRwOi8vYnJvd3NlaGFwcHkuY29tLyI+dXBncmFkZSB5b3VyIGJyb3dzZXI8L2E+IHRvIGltcHJvdmUgeW91ciBleHBlcmllbmNlLjwvcD4KICAgIDwhW2VuZGlmXS0tPiA8amhpLW1haW4+PC9qaGktbWFpbj4gPG5vc2NyaXB0PiA8aDE+WW91IG11c3QgZW5hYmxlIGphdmFzY3JpcHQgdG8gdmlldyB0aGlzIHBhZ2UuPC9oMT4gPC9ub3NjcmlwdD4gPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iYXBwLzEuZDliNGI1OTg0ZTdhYmY4ZDUxMzAuY2h1bmsuanMiPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImFwcC9wb2x5ZmlsbHMuZDliNGI1OTg0ZTdhYmY4ZDUxMzAuYnVuZGxlLmpzIj48L3NjcmlwdD48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJhcHAvZ2xvYmFsLmQ5YjRiNTk4NGU3YWJmOGQ1MTMwLmJ1bmRsZS5qcyI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iYXBwL21haW4uZDliNGI1OTg0ZTdhYmY4ZDUxMzAuYnVuZGxlLmpzIj48L3NjcmlwdD48L2JvZHk+IDwvaHRtbD4g]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9147480272209287168</serialNumber>
    <type>5245440</type>
    <name><![CDATA[HTTP TRACE method is enabled]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.</p>
<p>This behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The TRACE method should be disabled on production web servers.</p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/16.html">CWE-16: Configuration</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="TRACE" base64="true"><![CDATA[VFJBQ0UgLyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkNvb2tpZTogejFzOTg2Z3IxMA0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDY6MzkgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogbWVzc2FnZS9odHRwDQpDb250ZW50LUxlbmd0aDogMzM5DQpWaWE6IDEuMSB2ZWd1cg0KDQpUUkFDRSAvIEhUVFAvMS4xDQpDb29raWU6IHoxczk4NmdyMTANCkNvbm5lY3QtVGltZTogMQ0KWC1SZXF1ZXN0LUlkOiBiZjg4MzM2YS1jNjUxLTQyNDAtYmJlMi1mNGJmZDc5YzhiNGQNCkNvbm5lY3Rpb246IGNsb3NlDQpYLUZvcndhcmRlZC1Qcm90bzogaHR0cHMNClgtRm9yd2FyZGVkLUZvcjogODUuMS45Ny4yMTQNClgtUmVxdWVzdC1TdGFydDogMTUzODA3MTU5OTkxOA0KVG90YWwtUm91dGUtVGltZTogMA0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkNvbnRlbnQtTGVuZ3RoOiAwDQpYLUZvcndhcmRlZC1Qb3J0OiA0NDMNClZpYTogMS4xIHZlZ3VyDQo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7756452718068411392</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[//v2]]></path>
    <location><![CDATA[//v2 [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC8vdjJ5bGZ6YTIwcTdpIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIEludGVybmFsIFNlcnZlciBFcnJvcg0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KRGF0ZTogVGh1LCAyNyBTZXAgMjAxOCAxODoxMTozNCBHTVQNClZpYTogMS4xIHZlZ3VyDQoNCnsidGltZXN0YW1wIjoiMjAxOC0wOS0yN1QxODoxMTozNC42NTcrMDAwMCIsInN0YXR1cyI6NTAwLCJlcnJvciI6IkludGVybmFsIFNlcnZlciBFcnJvciIsIm1lc3NhZ2UiOiJUaGUgcmVxdWVzdCB3YXMgcmVqZWN0ZWQgYmVjYXVzZSB0aGUgVVJMIHdhcyBub3Qgbm9ybWFsaXplZC4iLCJwYXRoIjoiLy92MnlsZnphMjBxN2kifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1234773998425893888</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[//v2/]]></path>
    <location><![CDATA[//v2/ [URL path folder 1]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 1 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC8vdjJkbGE4dDloNm81LyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIEludGVybmFsIFNlcnZlciBFcnJvcg0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KRGF0ZTogVGh1LCAyNyBTZXAgMjAxOCAxODoxMTozNCBHTVQNClZpYTogMS4xIHZlZ3VyDQoNCnsidGltZXN0YW1wIjoiMjAxOC0wOS0yN1QxODoxMTozNC43NjYrMDAwMCIsInN0YXR1cyI6NTAwLCJlcnJvciI6IkludGVybmFsIFNlcnZlciBFcnJvciIsIm1lc3NhZ2UiOiJUaGUgcmVxdWVzdCB3YXMgcmVqZWN0ZWQgYmVjYXVzZSB0aGUgVVJMIHdhcyBub3Qgbm9ybWFsaXplZC4iLCJwYXRoIjoiLy92MmRsYTh0OWg2bzUvIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8880653421138837504</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[//v2/api-docs]]></path>
    <location><![CDATA[//v2/api-docs [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC8vdjIvYXBpLWRvY3NrcWM2NGkxZXZpIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIEludGVybmFsIFNlcnZlciBFcnJvcg0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KRGF0ZTogVGh1LCAyNyBTZXAgMjAxOCAxODoxMTo0MiBHTVQNClZpYTogMS4xIHZlZ3VyDQoNCnsidGltZXN0YW1wIjoiMjAxOC0wOS0yN1QxODoxMTo0Mi4yNjMrMDAwMCIsInN0YXR1cyI6NTAwLCJlcnJvciI6IkludGVybmFsIFNlcnZlciBFcnJvciIsIm1lc3NhZ2UiOiJUaGUgcmVxdWVzdCB3YXMgcmVqZWN0ZWQgYmVjYXVzZSB0aGUgVVJMIHdhcyBub3Qgbm9ybWFsaXplZC4iLCJwYXRoIjoiLy92Mi9hcGktZG9jc2txYzY0aTFldmkifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8500761109275910144</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api]]></path>
    <location><![CDATA[/api [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGlrc2xoOTJjMWV0IEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjE4IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjA3OjE4LjA0NyswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBpa3NsaDkyYzFldCJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3048415708536110080</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/]]></path>
    <location><![CDATA[/api/ [URL path folder 1]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 1 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGk1bGlqNTZ0anR2LyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjE2IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjA3OjE2Ljg3NCswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBpNWxpajU2dGp0di8ifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7293177551994377216</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/account]]></path>
    <location><![CDATA[/api/account [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYWNjb3VudDhtbG84a2MyaTQgSFRUUC8xLjENCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjE5IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjA3OjE5Ljg4OCswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBpL2FjY291bnQ4bWxvOGtjMmk0In0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2043166223354063872</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/account/]]></path>
    <location><![CDATA[/api/account/ [URL path folder 2]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 2 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYWNjb3VudGxwMHdkemtkOWsvIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS9yb2JvdHMudHh0DQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA4OjMyIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2FjY291bnRscDB3ZHprZDlrLyIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMSJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>634130811782776832</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/account/change-password]]></path>
    <location><![CDATA[/api/account/change-password [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYWNjb3VudC9jaGFuZ2UtcGFzc3dvcmQ3d3E5aTdkd2R1IEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS9yb2JvdHMudHh0DQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA4OjMzIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2FjY291bnQvY2hhbmdlLXBhc3N3b3JkN3dxOWk3ZHdkdSIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMSJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2667885548776425472</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/account/change-password/]]></path>
    <location><![CDATA[/api/account/change-password/ [URL path folder 3]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 3 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYWNjb3VudC9jaGFuZ2UtcGFzc3dvcmQ5c3VpcTJrajUwLyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNClJlZmVyZXI6IGh0dHBzOi8vY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20vcm9ib3RzLnR4dA0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA5OjExIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2FjY291bnQvY2hhbmdlLXBhc3N3b3JkOXN1aXEya2o1MC8iLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDEifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>399912344854562816</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/account/sessions]]></path>
    <location><![CDATA[/api/account/sessions [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYWNjb3VudC9zZXNzaW9uc3EzYWk4MzhxOWQgSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwczovL2NyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tL3JvYm90cy50eHQNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA5OjQwIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2FjY291bnQvc2Vzc2lvbnNxM2FpODM4cTlkIiwibWVzc2FnZSI6ImVycm9yLmh0dHAuNDAxIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8684373899269763072</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/account/sessions/]]></path>
    <location><![CDATA[/api/account/sessions/ [URL path folder 3]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 3 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYWNjb3VudC9zZXNzaW9uc29jaGUyaTU2YnMvIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS9yb2JvdHMudHh0DQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA5OjQ2IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2FjY291bnQvc2Vzc2lvbnNvY2hlMmk1NmJzLyIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMSJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1540832492670505984</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/audits]]></path>
    <location><![CDATA[/api/audits [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYXVkaXRzNGltMjd6bDl0aSBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA5OjQ3IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2F1ZGl0czRpbTI3emw5dGkiLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDEifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9015609842123856896</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/audits/]]></path>
    <location><![CDATA[/api/audits/ [URL path folder 2]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 2 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYXVkaXRzeGdpMnJlaTU2aC8gSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwczovL2NyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tL3JvYm90cy50eHQNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA5OjQ4IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2F1ZGl0c3hnaTJyZWk1NmgvIiwibWVzc2FnZSI6ImVycm9yLmh0dHAuNDAxIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1074071695871976448</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/authenticate]]></path>
    <location><![CDATA[/api/authenticate [request body]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the request body is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2F1dGhlbnRpY2F0ZSBIVFRQLzEuMQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uDQpBdXRob3JpemF0aW9uOiBCZWFyZXIge3tpZF90b2tlbn19DQpVc2VyLUFnZW50OiBQb3N0bWFuUnVudGltZS83LjMuMA0KQWNjZXB0OiAqLyoNCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtTGVuZ3RoOiAzOQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0KaWZmbmV5N3NmbA==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDY6NDEgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVucmVjb2duaXplZCB0b2tlbiAnaWZmbmV5N3NmbCc6IHdhcyBleHBlY3RpbmcgKCd0cnVlJywgJ2ZhbHNlJyBvciAnbnVsbCcpOyBuZXN0ZWQgZXhjZXB0aW9uIGlzIGNvbS5mYXN0ZXJ4bWwuamFja3Nvbi5jb3JlLkpzb25QYXJzZUV4Y2VwdGlvbjogVW5yZWNvZ25pemVkIHRva2VuICdpZmZuZXk3c2ZsJzogd2FzIGV4cGVjdGluZyAoJ3RydWUnLCAnZmFsc2UnIG9yICdudWxsJylcbiBhdCBbU291cmNlOiAoUHVzaGJhY2tJbnB1dFN0cmVhbSk7IGxpbmU6IDEsIGNvbHVtbjogMjFdIiwicGF0aCI6Ii9hcGkvYXV0aGVudGljYXRlIiwibWVzc2FnZSI6ImVycm9yLmh0dHAuNDAwIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7552048554239694848</serialNumber>
    <type>4197632</type>
    <name><![CDATA[Suspicious input transformation (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/authenticate]]></path>
    <location><![CDATA[/api/authenticate [request body]]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>Suspicious input transformation arises when an application receives user input, transforms it in some way, and then performs further processing on the result. The types of transformations that can lead to problems include decoding common formats, such as UTF-8 and URL-encoding, or processing of escape sequences, such as backslash escaping. </p>
<p>Performing these input transformations does not constitute a vulnerability in its own right, but might lead to problems in conjunction with other application behaviors. An attacker might be able to bypass input filters by suitably encoding their payloads, if the input is decoded after the input filters have been applied. Or an attacker might be able to interfere with other data that is concatenated onto their input, by finishing their input with the start of a multi-character encoding or escape sequence, the transformation of which will consume the start of the following data.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Review the transformation that is being applied, to understand whether this is intended and desirable behavior given the nature of the application functionality, and whether it gives rise to any vulnerabilities in relation to  bypassing of input filters or character consumption.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="http://blog.portswigger.net/2016/11/backslash-powered-scanning-hunting.html">Backslash Powered Scanning: Hunting Unknown Vulnerability Classes</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application appears to decode overlong UTF-8 sequences when processing the value of the request body, and echo the result in the response.<br><br>The payload <strong>l0gcpzf3cr[0xc1][0x81]ht2fhr9loy</strong> was submitted in the request body. This payload contains the overlong UTF-8 sequence [0xc1][0x81] corresponding to the character 'A'. The input was copied into the application's response as <strong>l0gcpzf3crAht2fhr9loy</strong> indicating that the application decoded the overlong UTF-8 sequence as the character 'A'.<br><br>It might be possible to use this behavior to bypass input validation by submitting overlong UTF-8 encodings of any filtered characters.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2F1dGhlbnRpY2F0ZSBIVFRQLzEuMQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uDQpBdXRob3JpemF0aW9uOiBCZWFyZXIge3tpZF90b2tlbn19DQpVc2VyLUFnZW50OiBQb3N0bWFuUnVudGltZS83LjMuMA0KQWNjZXB0OiAqLyoNCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtTGVuZ3RoOiAzOQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0KbDBnY3B6ZjNjcsGBaHQyZmhyOWxveQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDY6NDEgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVucmVjb2duaXplZCB0b2tlbiAnbDBnY3B6ZjNjckFodDJmaHI5bG95Jzogd2FzIGV4cGVjdGluZyAoJ3RydWUnLCAnZmFsc2UnIG9yICdudWxsJyk7IG5lc3RlZCBleGNlcHRpb24gaXMgY29tLmZhc3RlcnhtbC5qYWNrc29uLmNvcmUuSnNvblBhcnNlRXhjZXB0aW9uOiBVbnJlY29nbml6ZWQgdG9rZW4gJ2wwZ2NwemYzY3JBaHQyZmhyOWxveSc6IHdhcyBleHBlY3RpbmcgKCd0cnVlJywgJ2ZhbHNlJyBvciAnbnVsbCcpXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDQ1XSIsInBhdGgiOiIvYXBpL2F1dGhlbnRpY2F0ZSIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMCJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6519225352214769664</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/authenticate]]></path>
    <location><![CDATA[/api/authenticate [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYXV0aGVudGljYXRlcDdxZW44ZGFxZCBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjUzIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2F1dGhlbnRpY2F0ZXA3cWVuOGRhcWQiLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDEifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7820452541509570560</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [request body]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the request body is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQpjY3NzYjQ0OGFu]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDY6NDIgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVucmVjb2duaXplZCB0b2tlbiAnY2Nzc2I0NDhhbic6IHdhcyBleHBlY3RpbmcgKCd0cnVlJywgJ2ZhbHNlJyBvciAnbnVsbCcpOyBuZXN0ZWQgZXhjZXB0aW9uIGlzIGNvbS5mYXN0ZXJ4bWwuamFja3Nvbi5jb3JlLkpzb25QYXJzZUV4Y2VwdGlvbjogVW5yZWNvZ25pemVkIHRva2VuICdjY3NzYjQ0OGFuJzogd2FzIGV4cGVjdGluZyAoJ3RydWUnLCAnZmFsc2UnIG9yICdudWxsJylcbiBhdCBbU291cmNlOiAoUHVzaGJhY2tJbnB1dFN0cmVhbSk7IGxpbmU6IDEsIGNvbHVtbjogMjFdIiwicGF0aCI6Ii9hcGkvYmxvZ3MiLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDAifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5352927074756476928</serialNumber>
    <type>4197632</type>
    <name><![CDATA[Suspicious input transformation (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [request body]]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>Suspicious input transformation arises when an application receives user input, transforms it in some way, and then performs further processing on the result. The types of transformations that can lead to problems include decoding common formats, such as UTF-8 and URL-encoding, or processing of escape sequences, such as backslash escaping. </p>
<p>Performing these input transformations does not constitute a vulnerability in its own right, but might lead to problems in conjunction with other application behaviors. An attacker might be able to bypass input filters by suitably encoding their payloads, if the input is decoded after the input filters have been applied. Or an attacker might be able to interfere with other data that is concatenated onto their input, by finishing their input with the start of a multi-character encoding or escape sequence, the transformation of which will consume the start of the following data.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Review the transformation that is being applied, to understand whether this is intended and desirable behavior given the nature of the application functionality, and whether it gives rise to any vulnerabilities in relation to  bypassing of input filters or character consumption.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="http://blog.portswigger.net/2016/11/backslash-powered-scanning-hunting.html">Backslash Powered Scanning: Hunting Unknown Vulnerability Classes</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application appears to decode overlong UTF-8 sequences when processing the value of the request body, and echo the result in the response.<br><br>The payload <strong>o6g3ka8a2p[0xc1][0x81]45mpsivid7</strong> was submitted in the request body. This payload contains the overlong UTF-8 sequence [0xc1][0x81] corresponding to the character 'A'. The input was copied into the application's response as <strong>o6g3ka8a2pA45mpsivid7</strong> indicating that the application decoded the overlong UTF-8 sequence as the character 'A'.<br><br>It might be possible to use this behavior to bypass input validation by submitting overlong UTF-8 encodings of any filtered characters.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQpvNmcza2E4YTJwwYE0NW1wc2l2aWQ3]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDY6NDIgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVucmVjb2duaXplZCB0b2tlbiAnbzZnM2thOGEycEE0NW1wc2l2aWQ3Jzogd2FzIGV4cGVjdGluZyAoJ3RydWUnLCAnZmFsc2UnIG9yICdudWxsJyk7IG5lc3RlZCBleGNlcHRpb24gaXMgY29tLmZhc3RlcnhtbC5qYWNrc29uLmNvcmUuSnNvblBhcnNlRXhjZXB0aW9uOiBVbnJlY29nbml6ZWQgdG9rZW4gJ282ZzNrYThhMnBBNDVtcHNpdmlkNyc6IHdhcyBleHBlY3RpbmcgKCd0cnVlJywgJ2ZhbHNlJyBvciAnbnVsbCcpXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDQ1XSIsInBhdGgiOiIvYXBpL2Jsb2dzIiwibWVzc2FnZSI6ImVycm9yLmh0dHAuNDAwIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1793533378148929536</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [name JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or loginClient credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>name</b> JSON parameter is copied into the HTML document as plain text between tags. The payload <b>v08u0&lt;script&gt;alert(1)&lt;/script&gt;zjtce</b> was submitted in the name JSON parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The request uses a Content-type header which it is not possible to generate using a standard HTML form. Burp attempted to replace this header with a standard value, to facilitate cross-domain delivery of an exploit, but this does not appear to be possible.<br><br>The response does not state that the content type is HTML. The issue is only directly exploitable if a browser can be made to interpret the response as HTML. No modern browser will interpret the response as HTML. However, the issue might be indirectly exploitable if a client-side script processes the response and embeds it into an HTML context.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9ndjA4dTA8c2NyaXB0PmFsZXJ0KDEpPFwvc2NyaXB0PnpqdGNlIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGwsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfX0=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTYyNTYNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDc6MjcgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNjI1Ng0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTYyNTYsIm5hbWUiOiJCbG9ndjA4dTA8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+emp0Y2UiLCJoYW5kbGUiOiJIYW5kbGUiLCJ1c2VyIjp7ImlkIjo0LCJsb2dpbiI6InVzZXIiLCJmaXJzdE5hbWUiOiJVc2VyIiwibGFzdE5hbWUiOiJVc2VyIiwiZW1haWwiOiJ1c2VyQGxvY2FsaG9zdCIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiaW1hZ2VVcmwiOiIiLCJyZXNldERhdGUiOm51bGx9fQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8167493264065664000</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [name JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>name</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9na2c0dXlueTJwdiIsImhhbmRsZSI6IkhhbmRsZSIsInVzZXIiOnsiaWQiOjQsImxvZ2luIjoidXNlciIsImZpcnN0TmFtZSI6IlVzZXIiLCJsYXN0TmFtZSI6IlVzZXIiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiaW1hZ2VVcmwiOiIiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbiIsImNyZWF0ZWRCeSI6InN5c3RlbSIsImNyZWF0ZWREYXRlIjoiMjAxOC0wOS0wMlQyMToyMTo1Mi4zMDU1ODNaIiwibGFzdE1vZGlmaWVkQnkiOiJzeXN0ZW0iLCJsYXN0TW9kaWZpZWREYXRlIjpudWxsLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTYyMTYNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDc6MTMgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNjIxNg0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTYyMTYsIm5hbWUiOiJCbG9na2c0dXlueTJwdiIsImhhbmRsZSI6IkhhbmRsZSIsInVzZXIiOnsiaWQiOjQsImxvZ2luIjoidXNlciIsImZpcnN0TmFtZSI6IlVzZXIiLCJsYXN0TmFtZSI6IlVzZXIiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiYWN0aXZhdGVkIjp0cnVlLCJsYW5nS2V5IjoiZW4iLCJpbWFnZVVybCI6IiIsInJlc2V0RGF0ZSI6bnVsbH19]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1293594508261246976</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYmxvZ3MxaXVkMmgzY2J1IEhUVFAvMS4xDQpBdXRob3JpemF0aW9uOiBCZWFyZXIgZXlKaGJHY2lPaUpJVXpVeE1pSjkuZXlKemRXSWlPaUpoWkcxcGJpSXNJbUYxZEdnaU9pSlNUMHhGWDBGRVRVbE9MRkpQVEVWZlZWTkZVaUlzSW1WNGNDSTZNVFV6T0RFMU56azJOMzAuX2NfQmgwYmt2SEd4MWI3ZndqYm0yTFQ5MG9pNXFoNmdhbElMYkRHODQxZThhdlJBYUhoYkVmYU5aWTNJdDduUFJKVThGY2tneDJCY3NCZlRQOFZJencNClVzZXItQWdlbnQ6IFBvc3RtYW5SdW50aW1lLzcuMy4wDQpBY2NlcHQ6ICovKg0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjIyIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjA3OjIyLjQ0NiswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBpL2Jsb2dzMWl1ZDJoM2NidSJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1415245386511337472</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [handle JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or loginClient credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>handle</b> JSON parameter is copied into the HTML document as plain text between tags. The payload <b>uhbwj&lt;script&gt;alert(1)&lt;/script&gt;pso6t</b> was submitted in the handle JSON parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The request uses a Content-type header which it is not possible to generate using a standard HTML form. Burp attempted to replace this header with a standard value, to facilitate cross-domain delivery of an exploit, but this does not appear to be possible.<br><br>The response does not state that the content type is HTML. The issue is only directly exploitable if a browser can be made to interpret the response as HTML. No modern browser will interpret the response as HTML. However, the issue might be indirectly exploitable if a client-side script processes the response and embeds it into an HTML context.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxldWhid2o8c2NyaXB0PmFsZXJ0KDEpPFwvc2NyaXB0PnBzbzZ0IiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGwsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfX0=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTY0NTgNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDc6NTggR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNjQ1OA0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTY0NTgsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxldWhid2o8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+cHNvNnQiLCJ1c2VyIjp7ImlkIjo0LCJsb2dpbiI6InVzZXIiLCJmaXJzdE5hbWUiOiJVc2VyIiwibGFzdE5hbWUiOiJVc2VyIiwiZW1haWwiOiJ1c2VyQGxvY2FsaG9zdCIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiaW1hZ2VVcmwiOiIiLCJyZXNldERhdGUiOm51bGx9fQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2116172371341663232</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [handle JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>handle</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlcGNyNGtjMDh6YiIsInVzZXIiOnsiaWQiOjQsImxvZ2luIjoidXNlciIsImZpcnN0TmFtZSI6IlVzZXIiLCJsYXN0TmFtZSI6IlVzZXIiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiaW1hZ2VVcmwiOiIiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbiIsImNyZWF0ZWRCeSI6InN5c3RlbSIsImNyZWF0ZWREYXRlIjoiMjAxOC0wOS0wMlQyMToyMTo1Mi4zMDU1ODNaIiwibGFzdE1vZGlmaWVkQnkiOiJzeXN0ZW0iLCJsYXN0TW9kaWZpZWREYXRlIjpudWxsLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTYzNjgNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDc6NDUgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNjM2OA0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTYzNjgsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlcGNyNGtjMDh6YiIsInVzZXIiOnsiaWQiOjQsImxvZ2luIjoidXNlciIsImZpcnN0TmFtZSI6IlVzZXIiLCJsYXN0TmFtZSI6IlVzZXIiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiYWN0aXZhdGVkIjp0cnVlLCJsYW5nS2V5IjoiZW4iLCJpbWFnZVVybCI6IiIsInJlc2V0RGF0ZSI6bnVsbH19]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8136578704014028800</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [id JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>id</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6YTFnb2xveWRybywibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGwsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfX0=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDg6MTYgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVucmVjb2duaXplZCB0b2tlbiAnYTFnb2xveWRybyc6IHdhcyBleHBlY3RpbmcgKCd0cnVlJywgJ2ZhbHNlJyBvciAnbnVsbCcpXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDU4XTsgbmVzdGVkIGV4Y2VwdGlvbiBpcyBjb20uZmFzdGVyeG1sLmphY2tzb24uZGF0YWJpbmQuSnNvbk1hcHBpbmdFeGNlcHRpb246IFVucmVjb2duaXplZCB0b2tlbiAnYTFnb2xveWRybyc6IHdhcyBleHBlY3RpbmcgKCd0cnVlJywgJ2ZhbHNlJyBvciAnbnVsbCcpXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDU4XVxuIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiA0Ml0gKHRocm91Z2ggcmVmZXJlbmNlIGNoYWluOiBvcmcuamhpcHN0ZXIuYmxvZy5kb21haW4uQmxvZ1tcInVzZXJcIl0pIiwicGF0aCI6Ii9hcGkvYmxvZ3MiLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDAifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8768088591548775424</serialNumber>
    <type>1050368</type>
    <name><![CDATA[XML injection]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [id JSON parameter]]]></location>
    <severity>Medium</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>XML or SOAP injection vulnerabilities arise when user input is inserted into a server-side XML document or SOAP message in an unsafe way. It may be possible to use XML metacharacters to modify the structure of the resulting XML. Depending on the function in which the XML is used, it may be possible to interfere with the application's logic, to perform unauthorized actions or access sensitive data.</p>
<p>This kind of vulnerability can be difficult to detect and exploit remotely; you should review the application's response, and the purpose that the relevant input performs within the application's functionality, to determine whether it is indeed vulnerable. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The application should validate or sanitize user input before incorporating it into an XML document or SOAP message. It may be possible to block any input containing XML metacharacters such as &lt; and &gt;. Alternatively, these characters can be replaced with the corresponding entities: &amp;lt; and &amp;gt;.</p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/91.html">CWE-91: XML Injection (aka Blind XPath Injection)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/776.html">CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>id</b> JSON parameter appears to be vulnerable to XML injection. The payload <b>]]&gt;&gt;&lt;</b> was appended to the value of the id JSON parameter. The application's response indicated that this input may have caused an error within a server-side XML or SOAP parser, suggesting that the input has been inserted into an XML document or SOAP message without proper sanitization. ]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NF1dPj48LCJsb2dpbiI6InVzZXIiLCJmaXJzdE5hbWUiOiJVc2VyIiwibGFzdE5hbWUiOiJVc2VyIiwiZW1haWwiOiJ1c2VyQGxvY2FsaG9zdCIsImltYWdlVXJsIjoiIiwiYWN0aXZhdGVkIjp0cnVlLCJsYW5nS2V5IjoiZW4iLCJjcmVhdGVkQnkiOiJzeXN0ZW0iLCJjcmVhdGVkRGF0ZSI6IjIwMTgtMDktMDJUMjE6MjE6NTIuMzA1NTgzWiIsImxhc3RNb2RpZmllZEJ5Ijoic3lzdGVtIiwibGFzdE1vZGlmaWVkRGF0ZSI6bnVsbCwiYXV0aG9yaXRpZXMiOlsiUk9MRV9VU0VSIl19fQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDg6NDAgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVuZXhwZWN0ZWQgY2xvc2UgbWFya2VyICddJzogZXhwZWN0ZWQgJ30nIChmb3IgT2JqZWN0IHN0YXJ0aW5nIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiA0MV0pXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDQ5XTsgbmVzdGVkIGV4Y2VwdGlvbiBpcyBjb20uZmFzdGVyeG1sLmphY2tzb24uZGF0YWJpbmQuSnNvbk1hcHBpbmdFeGNlcHRpb246IFVuZXhwZWN0ZWQgY2xvc2UgbWFya2VyICddJzogZXhwZWN0ZWQgJ30nIChmb3IgT2JqZWN0IHN0YXJ0aW5nIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiA0MV0pXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDQ5XVxuIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiA0OF0gKHRocm91Z2ggcmVmZXJlbmNlIGNoYWluOiBvcmcuamhpcHN0ZXIuYmxvZy5kb21haW4uQmxvZ1tcInVzZXJcIl0pIiwicGF0aCI6Ii9hcGkvYmxvZ3MiLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDAifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1214158410646980608</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [loginClient JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or loginClient credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>loginClient</b> JSON parameter is copied into the HTML document as plain text between tags. The payload <b>kvopk&lt;script&gt;alert(1)&lt;/script&gt;yai00</b> was submitted in the loginClient JSON parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The request uses a Content-type header which it is not possible to generate using a standard HTML form. Burp attempted to replace this header with a standard value, to facilitate cross-domain delivery of an exploit, but this does not appear to be possible.<br><br>The response does not state that the content type is HTML. The issue is only directly exploitable if a browser can be made to interpret the response as HTML. No modern browser will interpret the response as HTML. However, the issue might be indirectly exploitable if a client-side script processes the response and embeds it into an HTML context.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2Vya3ZvcGs8c2NyaXB0PmFsZXJ0KDEpPFwvc2NyaXB0PnlhaTAwIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGwsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfX0=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTY3MTMNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDg6NTQgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNjcxMw0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTY3MTMsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2Vya3ZvcGs8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+eWFpMDAiLCJmaXJzdE5hbWUiOiJVc2VyIiwibGFzdE5hbWUiOiJVc2VyIiwiZW1haWwiOiJ1c2VyQGxvY2FsaG9zdCIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiaW1hZ2VVcmwiOiIiLCJyZXNldERhdGUiOm51bGx9fQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7931099413999876096</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [loginClient JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>loginClient</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VybDFsa2I2ZmJpdiIsImZpcnN0TmFtZSI6IlVzZXIiLCJsYXN0TmFtZSI6IlVzZXIiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiaW1hZ2VVcmwiOiIiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbiIsImNyZWF0ZWRCeSI6InN5c3RlbSIsImNyZWF0ZWREYXRlIjoiMjAxOC0wOS0wMlQyMToyMTo1Mi4zMDU1ODNaIiwibGFzdE1vZGlmaWVkQnkiOiJzeXN0ZW0iLCJsYXN0TW9kaWZpZWREYXRlIjpudWxsLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTY1NzMNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDg6NDMgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNjU3Mw0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTY1NzMsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VybDFsa2I2ZmJpdiIsImZpcnN0TmFtZSI6IlVzZXIiLCJsYXN0TmFtZSI6IlVzZXIiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiYWN0aXZhdGVkIjp0cnVlLCJsYW5nS2V5IjoiZW4iLCJpbWFnZVVybCI6IiIsInJlc2V0RGF0ZSI6bnVsbH19]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7793253311949009920</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [firstName JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or loginClient credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>firstName</b> JSON parameter is copied into the HTML document as plain text between tags. The payload <b>ow935&lt;script&gt;alert(1)&lt;/script&gt;vebvb</b> was submitted in the firstName JSON parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The request uses a Content-type header which it is not possible to generate using a standard HTML form. Burp attempted to replace this header with a standard value, to facilitate cross-domain delivery of an exploit, but this does not appear to be possible.<br><br>The response does not state that the content type is HTML. The issue is only directly exploitable if a browser can be made to interpret the response as HTML. No modern browser will interpret the response as HTML. However, the issue might be indirectly exploitable if a client-side script processes the response and embeds it into an HTML context.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlcm93OTM1PHNjcmlwdD5hbGVydCgxKTxcL3NjcmlwdD52ZWJ2YiIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGwsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfX0=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTY5NjUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDk6MzQgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNjk2NQ0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTY5NjUsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlcm93OTM1PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PnZlYnZiIiwibGFzdE5hbWUiOiJVc2VyIiwiZW1haWwiOiJ1c2VyQGxvY2FsaG9zdCIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiaW1hZ2VVcmwiOiIiLCJyZXNldERhdGUiOm51bGx9fQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4789597546251866112</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [firstName JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>firstName</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlcndzeTVkNXM2MXgiLCJsYXN0TmFtZSI6IlVzZXIiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiaW1hZ2VVcmwiOiIiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbiIsImNyZWF0ZWRCeSI6InN5c3RlbSIsImNyZWF0ZWREYXRlIjoiMjAxOC0wOS0wMlQyMToyMTo1Mi4zMDU1ODNaIiwibGFzdE1vZGlmaWVkQnkiOiJzeXN0ZW0iLCJsYXN0TW9kaWZpZWREYXRlIjpudWxsLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTY4NzUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDk6MTUgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNjg3NQ0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTY4NzUsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlcndzeTVkNXM2MXgiLCJsYXN0TmFtZSI6IlVzZXIiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiYWN0aXZhdGVkIjp0cnVlLCJsYW5nS2V5IjoiZW4iLCJpbWFnZVVybCI6IiIsInJlc2V0RGF0ZSI6bnVsbH19]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3223524600930610176</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [lastName JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or loginClient credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>lastName</b> JSON parameter is copied into the HTML document as plain text between tags. The payload <b>hbfs9&lt;script&gt;alert(1)&lt;/script&gt;f0589</b> was submitted in the lastName JSON parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The request uses a Content-type header which it is not possible to generate using a standard HTML form. Burp attempted to replace this header with a standard value, to facilitate cross-domain delivery of an exploit, but this does not appear to be possible.<br><br>The response does not state that the content type is HTML. The issue is only directly exploitable if a browser can be made to interpret the response as HTML. No modern browser will interpret the response as HTML. However, the issue might be indirectly exploitable if a client-side script processes the response and embeds it into an HTML context.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlcmhiZnM5PHNjcmlwdD5hbGVydCgxKTxcL3NjcmlwdD5mMDU4OSIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGwsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfX0=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTcxNjcNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTA6MDQgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNzE2Nw0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTcxNjcsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlcmhiZnM5PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PmYwNTg5IiwiZW1haWwiOiJ1c2VyQGxvY2FsaG9zdCIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiaW1hZ2VVcmwiOiIiLCJyZXNldERhdGUiOm51bGx9fQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9024709279546545152</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [lastName JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>lastName</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlcjJxbmw3OTc5OXMiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiaW1hZ2VVcmwiOiIiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbiIsImNyZWF0ZWRCeSI6InN5c3RlbSIsImNyZWF0ZWREYXRlIjoiMjAxOC0wOS0wMlQyMToyMTo1Mi4zMDU1ODNaIiwibGFzdE1vZGlmaWVkQnkiOiJzeXN0ZW0iLCJsYXN0TW9kaWZpZWREYXRlIjpudWxsLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTcwNzcNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MDk6NTAgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNzA3Nw0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTcwNzcsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlcjJxbmw3OTc5OXMiLCJlbWFpbCI6InVzZXJAbG9jYWxob3N0IiwiYWN0aXZhdGVkIjp0cnVlLCJsYW5nS2V5IjoiZW4iLCJpbWFnZVVybCI6IiIsInJlc2V0RGF0ZSI6bnVsbH19]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2373466811879160832</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [email JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or loginClient credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>email</b> JSON parameter is copied into the HTML document as plain text between tags. The payload <b>d6707&lt;script&gt;alert(1)&lt;/script&gt;t4xnf</b> was submitted in the email JSON parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The request uses a Content-type header which it is not possible to generate using a standard HTML form. Burp attempted to replace this header with a standard value, to facilitate cross-domain delivery of an exploit, but this does not appear to be possible.<br><br>The response does not state that the content type is HTML. The issue is only directly exploitable if a browser can be made to interpret the response as HTML. No modern browser will interpret the response as HTML. However, the issue might be indirectly exploitable if a client-side script processes the response and embeds it into an HTML context.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3RkNjcwNzxzY3JpcHQ+YWxlcnQoMSk8XC9zY3JpcHQ+dDR4bmYiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGwsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfX0=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTczMTkNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTA6MzAgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNzMxOQ0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTczMTksIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3RkNjcwNzxzY3JpcHQ+YWxlcnQoMSk8L3NjcmlwdD50NHhuZiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiaW1hZ2VVcmwiOiIiLCJyZXNldERhdGUiOm51bGx9fQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3458992920053886976</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [email JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>email</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3RoMXN6cDBuaGtlIiwiaW1hZ2VVcmwiOiIiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbiIsImNyZWF0ZWRCeSI6InN5c3RlbSIsImNyZWF0ZWREYXRlIjoiMjAxOC0wOS0wMlQyMToyMTo1Mi4zMDU1ODNaIiwibGFzdE1vZGlmaWVkQnkiOiJzeXN0ZW0iLCJsYXN0TW9kaWZpZWREYXRlIjpudWxsLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTcyNzkNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTA6MTkgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNzI3OQ0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTcyNzksIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3RoMXN6cDBuaGtlIiwiYWN0aXZhdGVkIjp0cnVlLCJsYW5nS2V5IjoiZW4iLCJpbWFnZVVybCI6IiIsInJlc2V0RGF0ZSI6bnVsbH19]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1838069849020237824</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [imageUrl JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or loginClient credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>imageUrl</b> JSON parameter is copied into the HTML document as plain text between tags. The payload <b>d0yag&lt;script&gt;alert(1)&lt;/script&gt;hhxj9</b> was submitted in the imageUrl JSON parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The request uses a Content-type header which it is not possible to generate using a standard HTML form. Burp attempted to replace this header with a standard value, to facilitate cross-domain delivery of an exploit, but this does not appear to be possible.<br><br>The response does not state that the content type is HTML. The issue is only directly exploitable if a browser can be made to interpret the response as HTML. No modern browser will interpret the response as HTML. However, the issue might be indirectly exploitable if a client-side script processes the response and embeds it into an HTML context.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6ImQweWFnPHNjcmlwdD5hbGVydCgxKTxcL3NjcmlwdD5oaHhqOSIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGwsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfX0=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTc0NTQNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTA6NTQgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNzQ1NA0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTc0NTQsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbiIsImltYWdlVXJsIjoiZDB5YWc8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+aGh4ajkiLCJyZXNldERhdGUiOm51bGx9fQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2283929853102963712</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [imageUrl JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>imageUrl</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IjN6NG52cTRrcXkiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbiIsImNyZWF0ZWRCeSI6InN5c3RlbSIsImNyZWF0ZWREYXRlIjoiMjAxOC0wOS0wMlQyMToyMTo1Mi4zMDU1ODNaIiwibGFzdE1vZGlmaWVkQnkiOiJzeXN0ZW0iLCJsYXN0TW9kaWZpZWREYXRlIjpudWxsLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTczNjQNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTA6NDQgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNzM2NA0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTczNjQsIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbiIsImltYWdlVXJsIjoiM3o0bnZxNGtxeSIsInJlc2V0RGF0ZSI6bnVsbH19]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3078372235882969088</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [activated JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>activated</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZXdpbWYxZDgwZ2IsImxhbmdLZXkiOiJlbiIsImNyZWF0ZWRCeSI6InN5c3RlbSIsImNyZWF0ZWREYXRlIjoiMjAxOC0wOS0wMlQyMToyMTo1Mi4zMDU1ODNaIiwibGFzdE1vZGlmaWVkQnkiOiJzeXN0ZW0iLCJsYXN0TW9kaWZpZWREYXRlIjpudWxsLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTE6MTMgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVucmVjb2duaXplZCB0b2tlbiAndHJ1ZXdpbWYxZDgwZ2InOiB3YXMgZXhwZWN0aW5nICdudWxsJywgJ3RydWUnLCAnZmFsc2UnIG9yIE5hTlxuIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiAxNjddOyBuZXN0ZWQgZXhjZXB0aW9uIGlzIGNvbS5mYXN0ZXJ4bWwuamFja3Nvbi5kYXRhYmluZC5Kc29uTWFwcGluZ0V4Y2VwdGlvbjogVW5yZWNvZ25pemVkIHRva2VuICd0cnVld2ltZjFkODBnYic6IHdhcyBleHBlY3RpbmcgJ251bGwnLCAndHJ1ZScsICdmYWxzZScgb3IgTmFOXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDE2N11cbiBhdCBbU291cmNlOiAoUHVzaGJhY2tJbnB1dFN0cmVhbSk7IGxpbmU6IDEsIGNvbHVtbjogMTQwXSAodGhyb3VnaCByZWZlcmVuY2UgY2hhaW46IG9yZy5qaGlwc3Rlci5ibG9nLmRvbWFpbi5CbG9nW1widXNlclwiXSkiLCJwYXRoIjoiL2FwaS9ibG9ncyIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMCJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3485920288986422272</serialNumber>
    <type>1050368</type>
    <name><![CDATA[XML injection]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [activated JSON parameter]]]></location>
    <severity>Medium</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>XML or SOAP injection vulnerabilities arise when user input is inserted into a server-side XML document or SOAP message in an unsafe way. It may be possible to use XML metacharacters to modify the structure of the resulting XML. Depending on the function in which the XML is used, it may be possible to interfere with the application's logic, to perform unauthorized actions or access sensitive data.</p>
<p>This kind of vulnerability can be difficult to detect and exploit remotely; you should review the application's response, and the purpose that the relevant input performs within the application's functionality, to determine whether it is indeed vulnerable. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The application should validate or sanitize user input before incorporating it into an XML document or SOAP message. It may be possible to block any input containing XML metacharacters such as &lt; and &gt;. Alternatively, these characters can be replaced with the corresponding entities: &amp;lt; and &amp;gt;.</p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/91.html">CWE-91: XML Injection (aka Blind XPath Injection)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/776.html">CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>activated</b> JSON parameter appears to be vulnerable to XML injection. The payload <b>]]&gt;&gt;&lt;</b> was appended to the value of the activated JSON parameter. The application's response indicated that this input may have caused an error within a server-side XML or SOAP parser, suggesting that the input has been inserted into an XML document or SOAP message without proper sanitization. ]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZV1dPj48LCJsYW5nS2V5IjoiZW4iLCJjcmVhdGVkQnkiOiJzeXN0ZW0iLCJjcmVhdGVkRGF0ZSI6IjIwMTgtMDktMDJUMjE6MjE6NTIuMzA1NTgzWiIsImxhc3RNb2RpZmllZEJ5Ijoic3lzdGVtIiwibGFzdE1vZGlmaWVkRGF0ZSI6bnVsbCwiYXV0aG9yaXRpZXMiOlsiUk9MRV9VU0VSIl19fQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTE6MzUgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVuZXhwZWN0ZWQgY2xvc2UgbWFya2VyICddJzogZXhwZWN0ZWQgJ30nIChmb3IgT2JqZWN0IHN0YXJ0aW5nIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiA0MV0pXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDE1N107IG5lc3RlZCBleGNlcHRpb24gaXMgY29tLmZhc3RlcnhtbC5qYWNrc29uLmRhdGFiaW5kLkpzb25NYXBwaW5nRXhjZXB0aW9uOiBVbmV4cGVjdGVkIGNsb3NlIG1hcmtlciAnXSc6IGV4cGVjdGVkICd9JyAoZm9yIE9iamVjdCBzdGFydGluZyBhdCBbU291cmNlOiAoUHVzaGJhY2tJbnB1dFN0cmVhbSk7IGxpbmU6IDEsIGNvbHVtbjogNDFdKVxuIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiAxNTddXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDE1Nl0gKHRocm91Z2ggcmVmZXJlbmNlIGNoYWluOiBvcmcuamhpcHN0ZXIuYmxvZy5kb21haW4uQmxvZ1tcInVzZXJcIl0pIiwicGF0aCI6Ii9hcGkvYmxvZ3MiLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDAifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7764308724145692672</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [langKey JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or loginClient credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>langKey</b> JSON parameter is copied into the HTML document as plain text between tags. The payload <b>p7l72&lt;script&gt;alert(1)&lt;/script&gt;hap7v</b> was submitted in the langKey JSON parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The request uses a Content-type header which it is not possible to generate using a standard HTML form. Burp attempted to replace this header with a standard value, to facilitate cross-domain delivery of an exploit, but this does not appear to be possible.<br><br>The response does not state that the content type is HTML. The issue is only directly exploitable if a browser can be made to interpret the response as HTML. No modern browser will interpret the response as HTML. However, the issue might be indirectly exploitable if a client-side script processes the response and embeds it into an HTML context.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVucDdsNzI8c2NyaXB0PmFsZXJ0KDEpPFwvc2NyaXB0PmhhcDd2IiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGwsImF1dGhvcml0aWVzIjpbIlJPTEVfVVNFUiJdfX0=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTc1NTkNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTE6NTAgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNzU1OQ0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTc1NTksIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbnA3bDcyPHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0PmhhcDd2IiwiaW1hZ2VVcmwiOiIiLCJyZXNldERhdGUiOm51bGx9fQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8675947597193220096</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [langKey JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>langKey</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuM3h2bTRrZmEyayIsImNyZWF0ZWRCeSI6InN5c3RlbSIsImNyZWF0ZWREYXRlIjoiMjAxOC0wOS0wMlQyMToyMTo1Mi4zMDU1ODNaIiwibGFzdE1vZGlmaWVkQnkiOiJzeXN0ZW0iLCJsYXN0TW9kaWZpZWREYXRlIjpudWxsLCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAxIENyZWF0ZWQNClNlcnZlcjogQ293Ym95DQpDb25uZWN0aW9uOiBjbG9zZQ0KWC1CbG9nYXBwLUFsZXJ0OiBibG9nQXBwLmJsb2cuY3JlYXRlZA0KRXhwaXJlczogMA0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG11c3QtcmV2YWxpZGF0ZQ0KWC1Yc3MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KUHJhZ21hOiBuby1jYWNoZQ0KTG9jYXRpb246IC9hcGkvYmxvZ3MvMTc1MTkNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTE6MzcgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpYLUJsb2dhcHAtUGFyYW1zOiAxNzUxOQ0KVmlhOiAxLjEgdmVndXINCg0KeyJpZCI6MTc1MTksIm5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJhY3RpdmF0ZWQiOnRydWUsImxhbmdLZXkiOiJlbjN4dm00a2ZhMmsiLCJpbWFnZVVybCI6IiIsInJlc2V0RGF0ZSI6bnVsbH19]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7035934580965373952</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [lastModifiedDate JSON parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>lastModifiedDate</b> JSON parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGx3N291c3M5anU0LCJhdXRob3JpdGllcyI6WyJST0xFX1VTRVIiXX19]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTM6MTUgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVucmVjb2duaXplZCB0b2tlbiAnbnVsbHc3b3VzczlqdTQnOiB3YXMgZXhwZWN0aW5nICdudWxsJywgJ3RydWUnLCAnZmFsc2UnIG9yIE5hTlxuIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiAyOTddOyBuZXN0ZWQgZXhjZXB0aW9uIGlzIGNvbS5mYXN0ZXJ4bWwuamFja3Nvbi5kYXRhYmluZC5Kc29uTWFwcGluZ0V4Y2VwdGlvbjogVW5yZWNvZ25pemVkIHRva2VuICdudWxsdzdvdXNzOWp1NCc6IHdhcyBleHBlY3RpbmcgJ251bGwnLCAndHJ1ZScsICdmYWxzZScgb3IgTmFOXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDI5N11cbiBhdCBbU291cmNlOiAoUHVzaGJhY2tJbnB1dFN0cmVhbSk7IGxpbmU6IDEsIGNvbHVtbjogMjYzXSAodGhyb3VnaCByZWZlcmVuY2UgY2hhaW46IG9yZy5qaGlwc3Rlci5ibG9nLmRvbWFpbi5CbG9nW1widXNlclwiXSkiLCJwYXRoIjoiL2FwaS9ibG9ncyIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMCJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1394967171527678976</serialNumber>
    <type>1050368</type>
    <name><![CDATA[XML injection]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs]]></path>
    <location><![CDATA[/api/blogs [lastModifiedDate JSON parameter]]]></location>
    <severity>Medium</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>XML or SOAP injection vulnerabilities arise when user input is inserted into a server-side XML document or SOAP message in an unsafe way. It may be possible to use XML metacharacters to modify the structure of the resulting XML. Depending on the function in which the XML is used, it may be possible to interfere with the application's logic, to perform unauthorized actions or access sensitive data.</p>
<p>This kind of vulnerability can be difficult to detect and exploit remotely; you should review the application's response, and the purpose that the relevant input performs within the application's functionality, to determine whether it is indeed vulnerable. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The application should validate or sanitize user input before incorporating it into an XML document or SOAP message. It may be possible to block any input containing XML metacharacters such as &lt; and &gt;. Alternatively, these characters can be replaced with the corresponding entities: &amp;lt; and &amp;gt;.</p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/91.html">CWE-91: XML Injection (aka Blind XPath Injection)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/776.html">CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>lastModifiedDate</b> JSON parameter appears to be vulnerable to XML injection. The payload <b>]]&gt;&gt;&lt;</b> was appended to the value of the lastModifiedDate JSON parameter. The application's response indicated that this input may have caused an error within a server-side XML or SOAP parser, suggesting that the input has been inserted into an XML document or SOAP message without proper sanitization. ]]></issueDetail>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCAvYXBpL2Jsb2dzIEhUVFAvMS4xDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LUxlbmd0aDogMzE1DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQp7Im5hbWUiOiJCbG9nIiwiaGFuZGxlIjoiSGFuZGxlIiwidXNlciI6eyJpZCI6NCwibG9naW4iOiJ1c2VyIiwiZmlyc3ROYW1lIjoiVXNlciIsImxhc3ROYW1lIjoiVXNlciIsImVtYWlsIjoidXNlckBsb2NhbGhvc3QiLCJpbWFnZVVybCI6IiIsImFjdGl2YXRlZCI6dHJ1ZSwibGFuZ0tleSI6ImVuIiwiY3JlYXRlZEJ5Ijoic3lzdGVtIiwiY3JlYXRlZERhdGUiOiIyMDE4LTA5LTAyVDIxOjIxOjUyLjMwNTU4M1oiLCJsYXN0TW9kaWZpZWRCeSI6InN5c3RlbSIsImxhc3RNb2RpZmllZERhdGUiOm51bGxdXT4+PCwiYXV0aG9yaXRpZXMiOlsiUk9MRV9VU0VSIl19fQ==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAwIEJhZCBSZXF1ZXN0DQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkRhdGU6IFRodSwgMjcgU2VwIDIwMTggMTg6MTM6MzkgR01UDQpYLUNvbnRlbnQtVHlwZS1PcHRpb25zOiBub3NuaWZmDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vcHJvYmxlbStqc29uDQpWaWE6IDEuMSB2ZWd1cg0KDQp7InR5cGUiOiJodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vcHJvYmxlbS13aXRoLW1lc3NhZ2UiLCJ0aXRsZSI6IkJhZCBSZXF1ZXN0Iiwic3RhdHVzIjo0MDAsImRldGFpbCI6IkpTT04gcGFyc2UgZXJyb3I6IFVuZXhwZWN0ZWQgY2xvc2UgbWFya2VyICddJzogZXhwZWN0ZWQgJ30nIChmb3IgT2JqZWN0IHN0YXJ0aW5nIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiA0MV0pXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDI4N107IG5lc3RlZCBleGNlcHRpb24gaXMgY29tLmZhc3RlcnhtbC5qYWNrc29uLmRhdGFiaW5kLkpzb25NYXBwaW5nRXhjZXB0aW9uOiBVbmV4cGVjdGVkIGNsb3NlIG1hcmtlciAnXSc6IGV4cGVjdGVkICd9JyAoZm9yIE9iamVjdCBzdGFydGluZyBhdCBbU291cmNlOiAoUHVzaGJhY2tJbnB1dFN0cmVhbSk7IGxpbmU6IDEsIGNvbHVtbjogNDFdKVxuIGF0IFtTb3VyY2U6IChQdXNoYmFja0lucHV0U3RyZWFtKTsgbGluZTogMSwgY29sdW1uOiAyODddXG4gYXQgW1NvdXJjZTogKFB1c2hiYWNrSW5wdXRTdHJlYW0pOyBsaW5lOiAxLCBjb2x1bW46IDI4Nl0gKHRocm91Z2ggcmVmZXJlbmNlIGNoYWluOiBvcmcuamhpcHN0ZXIuYmxvZy5kb21haW4uQmxvZ1tcInVzZXJcIl0pIiwicGF0aCI6Ii9hcGkvYmxvZ3MiLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDAifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8216733916608883712</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs/]]></path>
    <location><![CDATA[/api/blogs/ [URL path folder 2]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 2 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYmxvZ3NmYzhvaWZmajVlLyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA4OjI5IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2Jsb2dzZmM4b2lmZmo1ZS8iLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDEifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3066848528967032832</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs/16101]]></path>
    <location><![CDATA[/api/blogs/16101 [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYmxvZ3MvMTYxMDFpbm5zcWlsbWF0IEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS9hcGkvYmxvZ3MNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA4OjI5IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2Jsb2dzLzE2MTAxaW5uc3FpbG1hdCIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMSJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7727688907710274560</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/blogs/16102]]></path>
    <location><![CDATA[/api/blogs/16102 [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvYmxvZ3MvMTYxMDJzaG1hcmJjYTc2IEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS9hcGkvYmxvZ3MNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA4OjMwIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2Jsb2dzLzE2MTAyc2htYXJiY2E3NiIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMSJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4170563331969666048</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/entries]]></path>
    <location><![CDATA[/api/entries [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvZW50cmllc3JtdGw1anB2ZzUgSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjE3IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2VudHJpZXNybXRsNWpwdmc1IiwibWVzc2FnZSI6ImVycm9yLmh0dHAuNDAxIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7679630047752986624</serialNumber>
    <type>2097920</type>
    <name><![CDATA[Cross-site scripting (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/entries]]></path>
    <location><![CDATA[/api/entries [sort parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or loginClient credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p>
<p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; " ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
<p>In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>]]></remediationBackground>
    <references><![CDATA[<ul><li><a href="https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html">Using Burp to Find XSS issues</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>sort</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>lsz59&lt;script&gt;alert(1)&lt;/script&gt;faeml</b> was submitted in the sort parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The response does not state that the content type is HTML. The issue is only directly exploitable if a browser can be made to interpret the response as HTML. No modern browser will interpret the response as HTML. However, the issue might be indirectly exploitable if a client-side script processes the response and embeds it into an HTML context.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvZW50cmllcz9wYWdlPTAmc2l6ZT0yMCZzb3J0PWlkJTJjYXNjbHN6NTklM2NzY3JpcHQlM2VhbGVydCgxKSUzYyUyZnNjcmlwdCUzZWZhZW1sIEhUVFAvMS4xDQpBdXRob3JpemF0aW9uOiBCZWFyZXIgZXlKaGJHY2lPaUpJVXpVeE1pSjkuZXlKemRXSWlPaUpoWkcxcGJpSXNJbUYxZEdnaU9pSlNUMHhGWDBGRVRVbE9MRkpQVEVWZlZWTkZVaUlzSW1WNGNDSTZNVFV6T0RFMU56azJOMzAuX2NfQmgwYmt2SEd4MWI3ZndqYm0yTFQ5MG9pNXFoNmdhbElMYkRHODQxZThhdlJBYUhoYkVmYU5aWTNJdDduUFJKVThGY2tneDJCY3NCZlRQOFZJencNClVzZXItQWdlbnQ6IFBvc3RtYW5SdW50aW1lLzcuMy4wDQpBY2NlcHQ6ICovKg0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIEludGVybmFsIFNlcnZlciBFcnJvcg0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjM0IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLCJzdGF0dXMiOjUwMCwiZGV0YWlsIjoiTm8gcHJvcGVydHkgYXNjbHN6NTk8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+ZmFlbWwgZm91bmQgZm9yIHR5cGUgRW50cnkhIiwicGF0aCI6Ii9hcGkvZW50cmllcyIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjUwMCJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7276497024950703104</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/entries]]></path>
    <location><![CDATA[/api/entries [sort parameter]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the <b>sort</b> request parameter is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvZW50cmllcz9wYWdlPTAmc2l6ZT0yMCZzb3J0PWlkJTJjYXNjd2U1a3J1cHF2MiBIVFRQLzEuMQ0KQXV0aG9yaXphdGlvbjogQmVhcmVyIGV5SmhiR2NpT2lKSVV6VXhNaUo5LmV5SnpkV0lpT2lKaFpHMXBiaUlzSW1GMWRHZ2lPaUpTVDB4RlgwRkVUVWxPTEZKUFRFVmZWVk5GVWlJc0ltVjRjQ0k2TVRVek9ERTFOemsyTjMwLl9jX0JoMGJrdkhHeDFiN2Z3amJtMkxUOTBvaTVxaDZnYWxJTGJERzg0MWU4YXZSQWFIaGJFZmFOWlkzSXQ3blBSSlU4RmNrZ3gyQmNzQmZUUDhWSXp3DQpVc2VyLUFnZW50OiBQb3N0bWFuUnVudGltZS83LjMuMA0KQWNjZXB0OiAqLyoNCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIEludGVybmFsIFNlcnZlciBFcnJvcg0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjE5IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLCJzdGF0dXMiOjUwMCwiZGV0YWlsIjoiTm8gcHJvcGVydHkgYXNjd2U1a3J1cHF2MiBmb3VuZCBmb3IgdHlwZSBFbnRyeSEiLCJwYXRoIjoiL2FwaS9lbnRyaWVzIiwibWVzc2FnZSI6ImVycm9yLmh0dHAuNTAwIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4688719902548517888</serialNumber>
    <type>1051392</type>
    <name><![CDATA[File path manipulation]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/entries]]></path>
    <location><![CDATA[/api/entries [sort parameter]]]></location>
    <severity>Information</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>File path manipulation vulnerabilities arise when user-controllable data is placed into a file or URL path that is used on the server to access local resources, which may be within or outside the web root. If vulnerable, an attacker can modify the file path to access different resources, which may contain sensitive information. Even where an attack is constrained within the web root, it is often possible to retrieve items that are normally protected from direct access, such as application configuration files, the source code for server-executable scripts, or files with extensions that the web server is not configured to serve directly.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Ideally, application functionality should be designed in such a way that user-controllable data does not need to be placed into file or URL paths in order to access local resources on the server. This can normally be achieved by referencing known files via an index number rather than their name.</p>
<p>If it is considered unavoidable to place user data into file or URL paths, the data should be strictly validated against a whitelist of accepted values. Note that when accessing resources within the web root, simply blocking input containing file path traversal sequences (such as dot-dot-slash) is not always sufficient to prevent retrieval of sensitive information, because some protected items may be accessible at the original path without using any traversal sequences. </p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/23.html">CWE-23: Relative Path Traversal</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/35.html">CWE-35: Path Traversal: '.../...//'</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/36.html">CWE-36: Absolute Path Traversal</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The <b>sort</b> parameter appears to be vulnerable to file path manipulation attacks. <br><br>The payload <b>./id,asc</b> was submitted in the sort parameter. This returned the same content as the base request. The payload <b>.../id,asc</b> was then submitted, and this returned a different response. This indicates that the application may be vulnerable to file path manipulation.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvZW50cmllcz9wYWdlPTAmc2l6ZT0yMCZzb3J0PS4lMmZpZCUyY2FzYyBIVFRQLzEuMQ0KQXV0aG9yaXphdGlvbjogQmVhcmVyIGV5SmhiR2NpT2lKSVV6VXhNaUo5LmV5SnpkV0lpT2lKaFpHMXBiaUlzSW1GMWRHZ2lPaUpTVDB4RlgwRkVUVWxPTEZKUFRFVmZWVk5GVWlJc0ltVjRjQ0k2TVRVek9ERTFOemsyTjMwLl9jX0JoMGJrdkhHeDFiN2Z3amJtMkxUOTBvaTVxaDZnYWxJTGJERzg0MWU4YXZSQWFIaGJFZmFOWlkzSXQ3blBSSlU4RmNrZ3gyQmNzQmZUUDhWSXp3DQpVc2VyLUFnZW50OiBQb3N0bWFuUnVudGltZS83LjMuMA0KQWNjZXB0OiAqLyoNCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIEludGVybmFsIFNlcnZlciBFcnJvcg0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjQ1IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLCJzdGF0dXMiOjUwMCwiZGV0YWlsIjoiTm8gcHJvcGVydHkgLi9pZCBmb3VuZCBmb3IgdHlwZSBFbnRyeSEgRGlkIHlvdSBtZWFuICdpZCc/IiwicGF0aCI6Ii9hcGkvZW50cmllcyIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjUwMCJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvZW50cmllcz9wYWdlPTAmc2l6ZT0yMCZzb3J0PS4uLiUyZmlkJTJjYXNjIEhUVFAvMS4xDQpBdXRob3JpemF0aW9uOiBCZWFyZXIgZXlKaGJHY2lPaUpJVXpVeE1pSjkuZXlKemRXSWlPaUpoWkcxcGJpSXNJbUYxZEdnaU9pSlNUMHhGWDBGRVRVbE9MRkpQVEVWZlZWTkZVaUlzSW1WNGNDSTZNVFV6T0RFMU56azJOMzAuX2NfQmgwYmt2SEd4MWI3ZndqYm0yTFQ5MG9pNXFoNmdhbElMYkRHODQxZThhdlJBYUhoYkVmYU5aWTNJdDduUFJKVThGY2tneDJCY3NCZlRQOFZJencNClVzZXItQWdlbnQ6IFBvc3RtYW5SdW50aW1lLzcuMy4wDQpBY2NlcHQ6ICovKg0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNTAwIEludGVybmFsIFNlcnZlciBFcnJvcg0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjQ1IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLCJzdGF0dXMiOjUwMCwiZGV0YWlsIjoiTm8gcHJvcGVydHkgLi4uL2lkIGZvdW5kIGZvciB0eXBlIEVudHJ5ISIsInBhdGgiOiIvYXBpL2VudHJpZXMiLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC41MDAifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4404165107355302912</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/logs]]></path>
    <location><![CDATA[/api/logs [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvbG9nc3ZkNTgxZThhaXggSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA5OjQ5IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2xvZ3N2ZDU4MWU4YWl4IiwibWVzc2FnZSI6ImVycm9yLmh0dHAuNDAxIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4043358722089823232</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/logs/]]></path>
    <location><![CDATA[/api/logs/ [URL path folder 2]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 2 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvbG9nc2Nwc3doc3pnbjIvIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS9yb2JvdHMudHh0DQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA5OjUwIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL2xvZ3NjcHN3aHN6Z24yLyIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMSJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8101077813753720832</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/users]]></path>
    <location><![CDATA[/api/users [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvdXNlcnNjcHI2OTUxZnVjIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEwOjAzIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL3VzZXJzY3ByNjk1MWZ1YyIsIm1lc3NhZ2UiOiJlcnJvci5odHRwLjQwMSJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8298060992379095040</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/api/users/]]></path>
    <location><![CDATA[/api/users/ [URL path folder 2]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 2 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcGkvdXNlcnNlZXFtMGZkYmswLyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNClJlZmVyZXI6IGh0dHBzOi8vY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20vcm9ib3RzLnR4dA0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAxIFVuYXV0aG9yaXplZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEwOjI2IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJVbmF1dGhvcml6ZWQiLCJzdGF0dXMiOjQwMSwiZGV0YWlsIjoiRnVsbCBhdXRoZW50aWNhdGlvbiBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZSIsInBhdGgiOiIvYXBpL3VzZXJzZWVxbTBmZGJrMC8iLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDEifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5407727457524747264</serialNumber>
    <type>7340288</type>
    <name><![CDATA[Cacheable HTTPS response]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/app]]></path>
    <location><![CDATA[/app]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>
<ul>
<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/524.html">CWE-524: Information Exposure Through Caching</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/525.html">CWE-525: Information Exposure Through Browser Caching</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcHAgSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IFR1ZSwgMjcgU2VwIDIwMjIgMTg6MTI6MTEgR01UDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTEyNjIzMDQwMDAwMCwgcHVibGljDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IGNhY2hlDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KRGF0ZTogVGh1LCAyNyBTZXAgMjAxOCAxODoxMjoxMSBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMjcgU2VwIDIwMTggMTg6MDU6MzQgR01UDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNClgtQ29udGVudC1UeXBlLU9wdGlvbnM6IG5vc25pZmYNCkNvbnRlbnQtTGVuZ3RoOiAwDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbQ0KVmlhOiAxLjEgdmVndXINCg0K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>246891031094759424</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/app]]></path>
    <location><![CDATA[/app [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcHB0dHNmMjE4a2UyIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEyOjQ0IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEyOjQ0Ljk4MSswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBwdHRzZjIxOGtlMiJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8485648448199905280</serialNumber>
    <type>7340288</type>
    <name><![CDATA[Cacheable HTTPS response]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/app/]]></path>
    <location><![CDATA[/app/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>
<ul>
<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/524.html">CWE-524: Information Exposure Through Caching</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/525.html">CWE-525: Information Exposure Through Browser Caching</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcHAvIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IFR1ZSwgMjcgU2VwIDIwMjIgMTg6MTI6MTEgR01UDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTEyNjIzMDQwMDAwMCwgcHVibGljDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IGNhY2hlDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KRGF0ZTogVGh1LCAyNyBTZXAgMjAxOCAxODoxMjoxMSBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMjcgU2VwIDIwMTggMTg6MDU6MzQgR01UDQpTdHJpY3QtVHJhbnNwb3J0LVNlY3VyaXR5OiBtYXgtYWdlPTMxNTM2MDAwIDsgaW5jbHVkZVN1YkRvbWFpbnMNClgtQ29udGVudC1UeXBlLU9wdGlvbnM6IG5vc25pZmYNCkNvbnRlbnQtTGVuZ3RoOiAwDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbQ0KVmlhOiAxLjEgdmVndXINCg0K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5656623503859073024</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/app/]]></path>
    <location><![CDATA[/app/ [URL path folder 1]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 1 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcHBiNWhudGFoc29uLyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEyOjQ2IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEyOjQ2LjEwMCswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBwYjVobnRhaHNvbi8ifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6995075670260809728</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/app/1.d9b4b5984e7abf8d5130.chunk.js]]></path>
    <location><![CDATA[/app/1.d9b4b5984e7abf8d5130.chunk.js [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcHAvMS5kOWI0YjU5ODRlN2FiZjhkNTEzMC5jaHVuay5qczRrMWpyejdlaHEgSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwczovL2NyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tLw0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiBUdWUsIDI3IFNlcCAyMDIyIDE4OjE0OjE1IEdNVA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0xMjYyMzA0MDAwMDAsIHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVGh1LCAyNyBTZXAgMjAxOCAxODowNTozNCBHTVQNClByYWdtYTogY2FjaGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjE0OjE1IEdNVA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjE0OjE1LjcxMyswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBwLzEuZDliNGI1OTg0ZTdhYmY4ZDUxMzAuY2h1bmsuanM0azFqcno3ZWhxIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6054604220713120768</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/app/global.d9b4b5984e7abf8d5130.bundle.js]]></path>
    <location><![CDATA[/app/global.d9b4b5984e7abf8d5130.bundle.js [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcHAvZ2xvYmFsLmQ5YjRiNTk4NGU3YWJmOGQ1MTMwLmJ1bmRsZS5qc3N4OHRybTVudWwgSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwczovL2NyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tLw0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiBUdWUsIDI3IFNlcCAyMDIyIDE4OjEyOjU1IEdNVA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0xMjYyMzA0MDAwMDAsIHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVGh1LCAyNyBTZXAgMjAxOCAxODowNTozNCBHTVQNClByYWdtYTogY2FjaGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEyOjU1IEdNVA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEyOjU1LjMyMyswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBwL2dsb2JhbC5kOWI0YjU5ODRlN2FiZjhkNTEzMC5idW5kbGUuanNzeDh0cm01bnVsIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6275455363888573440</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/app/main.d9b4b5984e7abf8d5130.bundle.js]]></path>
    <location><![CDATA[/app/main.d9b4b5984e7abf8d5130.bundle.js [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcHAvbWFpbi5kOWI0YjU5ODRlN2FiZjhkNTEzMC5idW5kbGUuanM2ZjZyZXppb2hlIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS8NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiBUdWUsIDI3IFNlcCAyMDIyIDE4OjEzOjMyIEdNVA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0xMjYyMzA0MDAwMDAsIHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVGh1LCAyNyBTZXAgMjAxOCAxODowNTozNCBHTVQNClByYWdtYTogY2FjaGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEzOjMyIEdNVA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEzOjMyLjQ2MyswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBwL21haW4uZDliNGI1OTg0ZTdhYmY4ZDUxMzAuYnVuZGxlLmpzNmY2cmV6aW9oZSJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4521723791460139008</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/app/polyfills.d9b4b5984e7abf8d5130.bundle.js]]></path>
    <location><![CDATA[/app/polyfills.d9b4b5984e7abf8d5130.bundle.js [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9hcHAvcG9seWZpbGxzLmQ5YjRiNTk4NGU3YWJmOGQ1MTMwLmJ1bmRsZS5qc2NnN2xoY2cwcDkgSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwczovL2NyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tLw0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiBUdWUsIDI3IFNlcCAyMDIyIDE4OjEyOjU0IEdNVA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0xMjYyMzA0MDAwMDAsIHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVGh1LCAyNyBTZXAgMjAxOCAxODowNTozNCBHTVQNClByYWdtYTogY2FjaGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEyOjU0IEdNVA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEyOjU0LjM0MyswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvYXBwL3BvbHlmaWxscy5kOWI0YjU5ODRlN2FiZjhkNTEzMC5idW5kbGUuanNjZzdsaGNnMHA5In0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3662621122120111104</serialNumber>
    <type>7340288</type>
    <name><![CDATA[Cacheable HTTPS response]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/content]]></path>
    <location><![CDATA[/content]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>
<ul>
<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/524.html">CWE-524: Information Exposure Through Caching</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/525.html">CWE-525: Information Exposure Through Browser Caching</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9jb250ZW50IEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IFR1ZSwgMjcgU2VwIDIwMjIgMTg6MTE6MTIgR01UDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTEyNjIzMDQwMDAwMCwgcHVibGljDQpQcmFnbWE6IGNhY2hlDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KRGF0ZTogVGh1LCAyNyBTZXAgMjAxOCAxODoxMToxMiBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMjcgU2VwIDIwMTggMTg6MDU6MzQgR01UDQpDb250ZW50LUxlbmd0aDogMA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0NClZpYTogMS4xIHZlZ3VyDQoNCg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3787630289996962816</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/content]]></path>
    <location><![CDATA[/content [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9jb250ZW50aWI4MTFycTI3NSBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjExOjQ4IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjExOjQ4LjcwMCswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvY29udGVudGliODExcnEyNzUifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2835627696543820800</serialNumber>
    <type>7340288</type>
    <name><![CDATA[Cacheable HTTPS response]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/content/]]></path>
    <location><![CDATA[/content/]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>
<ul>
<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/524.html">CWE-524: Information Exposure Through Caching</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/525.html">CWE-525: Information Exposure Through Browser Caching</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9jb250ZW50LyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IFR1ZSwgMjcgU2VwIDIwMjIgMTg6MTE6MjIgR01UDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTEyNjIzMDQwMDAwMCwgcHVibGljDQpQcmFnbWE6IGNhY2hlDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KRGF0ZTogVGh1LCAyNyBTZXAgMjAxOCAxODoxMToyMiBHTVQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMjcgU2VwIDIwMTggMTg6MDU6MzQgR01UDQpDb250ZW50LUxlbmd0aDogMA0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0NClZpYTogMS4xIHZlZ3VyDQoNCg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8418406248780304384</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/content/]]></path>
    <location><![CDATA[/content/ [URL path folder 1]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 1 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9jb250ZW50dDNoMWF1Mm9uai8gSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjExOjU3IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjExOjU3LjA2OSswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvY29udGVudHQzaDFhdTJvbmovIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9008087137010593792</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/content/global-sass.d9b4b5984e7abf8d5130.css]]></path>
    <location><![CDATA[/content/global-sass.d9b4b5984e7abf8d5130.css [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9jb250ZW50L2dsb2JhbC1zYXNzLmQ5YjRiNTk4NGU3YWJmOGQ1MTMwLmNzc3M1MXA3NG9heWYgSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwczovL2NyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tLw0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiBUdWUsIDI3IFNlcCAyMDIyIDE4OjEyOjA1IEdNVA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0xMjYyMzA0MDAwMDAsIHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVGh1LCAyNyBTZXAgMjAxOCAxODowNTozNCBHTVQNClByYWdtYTogY2FjaGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEyOjA1IEdNVA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEyOjA1Ljc4MyswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvY29udGVudC9nbG9iYWwtc2Fzcy5kOWI0YjU5ODRlN2FiZjhkNTEzMC5jc3NzNTFwNzRvYXlmIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2817652463098512384</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/content/main-sass.d9b4b5984e7abf8d5130.css]]></path>
    <location><![CDATA[/content/main-sass.d9b4b5984e7abf8d5130.css [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9jb250ZW50L21haW4tc2Fzcy5kOWI0YjU5ODRlN2FiZjhkNTEzMC5jc3NzdTZveDE2eTBnIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS8NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiBUdWUsIDI3IFNlcCAyMDIyIDE4OjEyOjM0IEdNVA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0xMjYyMzA0MDAwMDAsIHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVGh1LCAyNyBTZXAgMjAxOCAxODowNTozNCBHTVQNClByYWdtYTogY2FjaGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEyOjM0IEdNVA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEyOjM0LjkzMCswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvY29udGVudC9tYWluLXNhc3MuZDliNGI1OTg0ZTdhYmY4ZDUxMzAuY3Nzc3U2b3gxNnkwZyJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4213019796716860416</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/content/main.d9b4b5984e7abf8d5130.css]]></path>
    <location><![CDATA[/content/main.d9b4b5984e7abf8d5130.css [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9jb250ZW50L21haW4uZDliNGI1OTg0ZTdhYmY4ZDUxMzAuY3NzazhzcnYwM2xwbyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNClJlZmVyZXI6IGh0dHBzOi8vY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20vDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiBUdWUsIDI3IFNlcCAyMDIyIDE4OjEyOjM0IEdNVA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0xMjYyMzA0MDAwMDAsIHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVGh1LCAyNyBTZXAgMjAxOCAxODowNTozNCBHTVQNClByYWdtYTogY2FjaGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEyOjM0IEdNVA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEyOjM0LjYxMiswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvY29udGVudC9tYWluLmQ5YjRiNTk4NGU3YWJmOGQ1MTMwLmNzc2s4c3J2MDNscG8ifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9212620268197346304</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/content/vendors-sass.d9b4b5984e7abf8d5130.css]]></path>
    <location><![CDATA[/content/vendors-sass.d9b4b5984e7abf8d5130.css [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9jb250ZW50L3ZlbmRvcnMtc2Fzcy5kOWI0YjU5ODRlN2FiZjhkNTEzMC5jc3NwaG5nNHJqazUzIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS8NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiBUdWUsIDI3IFNlcCAyMDIyIDE4OjExOjU4IEdNVA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0xMjYyMzA0MDAwMDAsIHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVGh1LCAyNyBTZXAgMjAxOCAxODowNTozNCBHTVQNClByYWdtYTogY2FjaGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjExOjU4IEdNVA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjExOjU4LjU4NCswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvY29udGVudC92ZW5kb3JzLXNhc3MuZDliNGI1OTg0ZTdhYmY4ZDUxMzAuY3NzcGhuZzRyams1MyJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1519469021427609600</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/content/vendors.d9b4b5984e7abf8d5130.css]]></path>
    <location><![CDATA[/content/vendors.d9b4b5984e7abf8d5130.css [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9jb250ZW50L3ZlbmRvcnMuZDliNGI1OTg0ZTdhYmY4ZDUxMzAuY3NzYzR6ajZwMGoyZyBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNClJlZmVyZXI6IGh0dHBzOi8vY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20vDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiBUdWUsIDI3IFNlcCAyMDIyIDE4OjEyOjAzIEdNVA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0xMjYyMzA0MDAwMDAsIHB1YmxpYw0KTGFzdC1Nb2RpZmllZDogVGh1LCAyNyBTZXAgMjAxOCAxODowNTozNCBHTVQNClByYWdtYTogY2FjaGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04DQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEyOjAzIEdNVA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEyOjAzLjM1MSswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvY29udGVudC92ZW5kb3JzLmQ5YjRiNTk4NGU3YWJmOGQ1MTMwLmNzc2M0emo2cDBqMmcifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5288660944237041664</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/favicon.ico]]></path>
    <location><![CDATA[/favicon.ico [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9mYXZpY29uLmljb2xwYTF2bjlqaWggSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwczovL2NyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tLw0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjExOjM0IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjExOjM0LjY2MyswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvZmF2aWNvbi5pY29scGExdm45amloIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5096215655577972736</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/management]]></path>
    <location><![CDATA[/management [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9tYW5hZ2VtZW50b2VlNDdvcXl4cSBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEwOjQwIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEwOjQwLjIzMSswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvbWFuYWdlbWVudG9lZTQ3b3F5eHEifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3153583633705021440</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/management/]]></path>
    <location><![CDATA[/management/ [URL path folder 1]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 1 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9tYW5hZ2VtZW50ZW0ydTlid2ppby8gSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEwOjUyIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEwOjUyLjE3MiswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvbWFuYWdlbWVudGVtMnU5YndqaW8vIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1964428819450341376</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/management/configprops]]></path>
    <location><![CDATA[/management/configprops [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9tYW5hZ2VtZW50L2NvbmZpZ3Byb3BzZ3Z5bzVtYmllayBIVFRQLzEuMQ0KQXV0aG9yaXphdGlvbjogQmVhcmVyIGV5SmhiR2NpT2lKSVV6VXhNaUo5LmV5SnpkV0lpT2lKMWMyVnlJaXdpWVhWMGFDSTZJbEpQVEVWZlZWTkZVaUlzSW1WNGNDSTZNVFV6T0RFMU56azNObjAucW0ta0U5emx2NjlQU3J6dWVnTzFCbkdpZHUwM0djQ2ktMTE3OE0wdk04QmNVVmRYaHdwaHRlYW12YS03RFpXWjBQQUNHYWg1Z0FwYzR5eG50X0RUdUENClVzZXItQWdlbnQ6IFBvc3RtYW5SdW50aW1lLzcuMy4wDQpBY2NlcHQ6ICovKg0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDAzIEZvcmJpZGRlbg0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEwOjU0IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3Byb2JsZW0ranNvbg0KVmlhOiAxLjEgdmVndXINCg0KeyJ0eXBlIjoiaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlIiwidGl0bGUiOiJGb3JiaWRkZW4iLCJzdGF0dXMiOjQwMywiZGV0YWlsIjoiQWNjZXNzIGlzIGRlbmllZCIsInBhdGgiOiIvbWFuYWdlbWVudC9jb25maWdwcm9wc2d2eW81bWJpZWsiLCJtZXNzYWdlIjoiZXJyb3IuaHR0cC40MDMifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2667043677038445568</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/management/env]]></path>
    <location><![CDATA[/management/env [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9tYW5hZ2VtZW50L2Vudjh4bXZ6a3cxZXEgSFRUUC8xLjENCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEwOjU5IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEwOjU5Ljc2MyswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvbWFuYWdlbWVudC9lbnY4eG12emt3MWVxIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4852318610576402432</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/management/logs]]></path>
    <location><![CDATA[/management/logs [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9tYW5hZ2VtZW50L2xvZ3NyZjYyazU3ZXBmIEhUVFAvMS4xDQpBdXRob3JpemF0aW9uOiBCZWFyZXIgZXlKaGJHY2lPaUpJVXpVeE1pSjkuZXlKemRXSWlPaUpoWkcxcGJpSXNJbUYxZEdnaU9pSlNUMHhGWDBGRVRVbE9MRkpQVEVWZlZWTkZVaUlzSW1WNGNDSTZNVFV6T0RFMU56azJOMzAuX2NfQmgwYmt2SEd4MWI3ZndqYm0yTFQ5MG9pNXFoNmdhbElMYkRHODQxZThhdlJBYUhoYkVmYU5aWTNJdDduUFJKVThGY2tneDJCY3NCZlRQOFZJencNClVzZXItQWdlbnQ6IFBvc3RtYW5SdW50aW1lLzcuMy4wDQpBY2NlcHQ6ICovKg0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEwOjU3IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEwOjU3LjM5OCswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvbWFuYWdlbWVudC9sb2dzcmY2Mms1N2VwZiJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3573918666500259840</serialNumber>
    <type>6292736</type>
    <name><![CDATA[Credit card numbers disclosed]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/management/metrics]]></path>
    <location><![CDATA[/management/metrics]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Applications sometimes disclose sensitive financial information such as credit card numbers. Responses containing credit card numbers may not represent any security vulnerability - for example, a number may belong to the logged-in user to whom it is displayed. If a credit card number is identified during a security assessment it should be verified, then application logic reviewed to identify whether its disclosure within the application is necessary and appropriate.</p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/200.html">CWE-200: Information Exposure</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/312.html">CWE-388: Error Handling</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The following credit card number was disclosed in the response:<ul><li>4379840507533283</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[4379840507533283]]></issueDetailItem>
    </issueDetailItems>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9tYW5hZ2VtZW50L21ldHJpY3MgSFRUUC8xLjENCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2712100118537196544</serialNumber>
    <type>6292736</type>
    <name><![CDATA[Credit card numbers disclosed]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/management/metrics]]></path>
    <location><![CDATA[/management/metrics]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Applications sometimes disclose sensitive financial information such as credit card numbers. Responses containing credit card numbers may not represent any security vulnerability - for example, a number may belong to the logged-in user to whom it is displayed. If a credit card number is identified during a security assessment it should be verified, then application logic reviewed to identify whether its disclosure within the application is necessary and appropriate.</p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/200.html">CWE-200: Information Exposure</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/312.html">CWE-388: Error Handling</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The following credit card number was disclosed in the response:<ul><li>5237992754478198</li></ul>]]></issueDetail>
    <issueDetailItems>
      <issueDetailItem><![CDATA[5237992754478198]]></issueDetailItem>
    </issueDetailItems>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9tYW5hZ2VtZW50L21ldHJpY3MgSFRUUC8xLjENCkF1dGhvcml6YXRpb246IEJlYXJlciBleUpoYkdjaU9pSklVelV4TWlKOS5leUp6ZFdJaU9pSmhaRzFwYmlJc0ltRjFkR2dpT2lKU1QweEZYMEZFVFVsT0xGSlBURVZmVlZORlVpSXNJbVY0Y0NJNk1UVXpPREUxTnprMk4zMC5fY19CaDBia3ZIR3gxYjdmd2pibTJMVDkwb2k1cWg2Z2FsSUxiREc4NDFlOGF2UkFhSGhiRWZhTlpZM0l0N25QUkpVOEZja2d4MkJjc0JmVFA4Vkl6dw0KVXNlci1BZ2VudDogUG9zdG1hblJ1bnRpbWUvNy4zLjANCkFjY2VwdDogKi8qDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1156601902322994176</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/management/metrics]]></path>
    <location><![CDATA[/management/metrics [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9tYW5hZ2VtZW50L21ldHJpY3NtM2pmd3Myc3o4IEhUVFAvMS4xDQpBdXRob3JpemF0aW9uOiBCZWFyZXIgZXlKaGJHY2lPaUpJVXpVeE1pSjkuZXlKemRXSWlPaUpoWkcxcGJpSXNJbUYxZEdnaU9pSlNUMHhGWDBGRVRVbE9MRkpQVEVWZlZWTkZVaUlzSW1WNGNDSTZNVFV6T0RFMU56azJOMzAuX2NfQmgwYmt2SEd4MWI3ZndqYm0yTFQ5MG9pNXFoNmdhbElMYkRHODQxZThhdlJBYUhoYkVmYU5aWTNJdDduUFJKVThGY2tneDJCY3NCZlRQOFZJencNClVzZXItQWdlbnQ6IFBvc3RtYW5SdW50aW1lLzcuMy4wDQpBY2NlcHQ6ICovKg0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjExOjEzIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjExOjEzLjYzNSswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvbWFuYWdlbWVudC9tZXRyaWNzbTNqZndzMnN6OCJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2437589747525765120</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/manifest.webapp]]></path>
    <location><![CDATA[/manifest.webapp [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9tYW5pZmVzdC53ZWJhcHBqbGs0ODdjdmxkIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS8NCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjExOjQ3IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjExOjQ3LjA1OSswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvbWFuaWZlc3Qud2ViYXBwamxrNDg3Y3ZsZCJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3637201415361495040</serialNumber>
    <type>6292992</type>
    <name><![CDATA[Robots.txt file]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/robots.txt]]></path>
    <location><![CDATA[/robots.txt]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>The file robots.txt is used to give instructions to web robots, such as search engine crawlers, about locations within the web site that robots are allowed, or not allowed, to crawl and index.</p>
<p>The presence of the robots.txt does not in itself present any kind of security vulnerability. However, it is often used to identify restricted or private areas of a site's contents. The information in the file may therefore help an attacker to map out the site's contents, especially if some of the locations identified are not linked from elsewhere in the site. If the application relies on robots.txt to protect access to these areas, and does not enforce proper access control over them, then this presents a serious vulnerability.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The robots.txt file is not itself a security threat, and its correct use can represent good practice for non-security reasons. You should not assume that all web robots will honor the file's instructions. Rather, assume that attackers will pay close attention to any locations identified in the file. Do not rely on robots.txt to provide any kind of protection over unauthorized access.</p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/200.html">CWE-200: Information Exposure</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The web server contains a robots.txt file.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9yb2JvdHMudHh0IEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpTZXJ2ZXI6IENvd2JveQ0KQ29ubmVjdGlvbjogY2xvc2UNCkV4cGlyZXM6IDANCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBtdXN0LXJldmFsaWRhdGUNClgtWHNzLVByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNClByYWdtYTogbm8tY2FjaGUNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA2OjM5IEdNVA0KTGFzdC1Nb2RpZmllZDogU3VuLCAyMyBTZXAgMjAxOCAyMDo1NzowNiBHTVQNClgtQ29udGVudC1UeXBlLU9wdGlvbnM6IG5vc25pZmYNClN0cmljdC1UcmFuc3BvcnQtU2VjdXJpdHk6IG1heC1hZ2U9MzE1MzYwMDAgOyBpbmNsdWRlU3ViRG9tYWlucw0KQ29udGVudC1MZW5ndGg6IDIzOQ0KQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluDQpWaWE6IDEuMSB2ZWd1cg0KDQojIHJvYm90c3R4dC5vcmcvCgpVc2VyLWFnZW50OiAqCkRpc2FsbG93OiAvYXBpL2FjY291bnQKRGlzYWxsb3c6IC9hcGkvYWNjb3VudC9jaGFuZ2UtcGFzc3dvcmQKRGlzYWxsb3c6IC9hcGkvYWNjb3VudC9zZXNzaW9ucwpEaXNhbGxvdzogL2FwaS9hdWRpdHMvCkRpc2FsbG93OiAvYXBpL2xvZ3MvCkRpc2FsbG93OiAvYXBpL3VzZXJzLwpEaXNhbGxvdzogL21hbmFnZW1lbnQvCkRpc2FsbG93OiAvdjIvYXBpLWRvY3MvCg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6333490151938972672</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/robots.txt]]></path>
    <location><![CDATA[/robots.txt [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC9yb2JvdHMudHh0OGU2bW14OHpobSBIVFRQLzEuMQ0KSG9zdDogY3JpbWRyYWMtamhpcHN0ZXItNS1kZW1vLmhlcm9rdWFwcC5jb20NCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChjb21wYXRpYmxlOyBNU0lFIDkuMDsgV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IFRyaWRlbnQvNS4wKQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjA3OjE2IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjA3OjE2LjgzNSswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvcm9ib3RzLnR4dDhlNm1teDh6aG0ifQ==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2919747789589601280</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/v2]]></path>
    <location><![CDATA[/v2 [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC92MmFvdDNwOG9kMnEgSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEzOjE3IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEzOjE3LjgxOCswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvdjJhb3QzcDhvZDJxIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8111634046319397888</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/v2/]]></path>
    <location><![CDATA[/v2/ [URL path folder 1]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 1 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC92MnV3c2gzenFzYzcvIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEzOjIwIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEzOjIwLjEyMSswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvdjJ1d3NoM3pxc2M3LyJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2533848354081472512</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/v2/api-docs]]></path>
    <location><![CDATA[/v2/api-docs [URL path filename]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path filename is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC92Mi9hcGktZG9jc2JhN2txOTdkMGcgSFRUUC8xLjENCkhvc3Q6IGNyaW1kcmFjLWpoaXBzdGVyLTUtZGVtby5oZXJva3VhcHAuY29tDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoY29tcGF0aWJsZTsgTVNJRSA5LjA7IFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0OyBUcmlkZW50LzUuMCkNCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEzOjIxIEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEzOjIxLjYyMyswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvdjIvYXBpLWRvY3NiYTdrcTk3ZDBnIn0=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5161023657820997632</serialNumber>
    <type>4197376</type>
    <name><![CDATA[Input returned in response (reflected)]]></name>
    <host ip="52.212.237.169">https://crimdrac-jhipster-5-demo.herokuapp.com</host>
    <path><![CDATA[/v2/api-docs/]]></path>
    <location><![CDATA[/v2/api-docs/ [URL path folder 2]]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>]]></issueBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The value of the URL path folder 2 is copied into the application's response.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIC92Mi9hcGktZG9jc3N6eGdxZGl3d3ovIEhUVFAvMS4xDQpIb3N0OiBjcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgOS4wOyBXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NDsgVHJpZGVudC81LjApDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cHM6Ly9jcmltZHJhYy1qaGlwc3Rlci01LWRlbW8uaGVyb2t1YXBwLmNvbS9yb2JvdHMudHh0DQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU2VydmVyOiBDb3dib3kNCkNvbm5lY3Rpb246IGNsb3NlDQpFeHBpcmVzOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MCwgbXVzdC1yZXZhbGlkYXRlDQpYLVhzcy1Qcm90ZWN0aW9uOiAxOyBtb2RlPWJsb2NrDQpQcmFnbWE6IG5vLWNhY2hlDQpEYXRlOiBUaHUsIDI3IFNlcCAyMDE4IDE4OjEzOjM5IEdNVA0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KU3RyaWN0LVRyYW5zcG9ydC1TZWN1cml0eTogbWF4LWFnZT0zMTUzNjAwMCA7IGluY2x1ZGVTdWJEb21haW5zDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOA0KVmlhOiAxLjEgdmVndXINCg0KeyJ0aW1lc3RhbXAiOiIyMDE4LTA5LTI3VDE4OjEzOjM5LjY1NSswMDAwIiwic3RhdHVzIjo0MDQsImVycm9yIjoiTm90IEZvdW5kIiwibWVzc2FnZSI6Ik5vdCBGb3VuZCIsInBhdGgiOiIvdjIvYXBpLWRvY3NzenhncWRpd3d6LyJ9]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
</issues>
